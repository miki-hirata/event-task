extends layout
//- 19章 イベントと進捗表の表示画面を作成で実装

block content
  div.card.my-3
    div.card-header
      h4 #{event.eventName}
    div.card-body
      p(style="white-space:pre;") #{event.memo}
      //- white-space:pre;　→　改行は改行として扱う
    div.card-footer
      p 開催日: #{event.formattedEventDate}
      p 会場： #{event.eventPlace}
      p 作成者: #{event.user.username}
      //-イベントの作成者のユーザー　（スケジュールとユーザーのテーブルがjoinされている前提の表記）
      //-スケジュールモデルにusernameはない
      //-テーブルのjoinはサーバー側（routes/event.js）
      //-真ん中のuser はseaqualizeの仕様で生成されている
  - var isMine = parseInt(user.id) === event.user.userId
  //- event.jsのisMineと大体一緒
  if isMine
    div
      a(href=`/events/${event.eventId}/edit`).btn.btn-info イベントを編集する
  h3.my-3 タスク表
  table.table.table-bordered
    tr
      th タスク
      each user in users
        th #{user.username}
    each task in tasks
      tr
        th #{task.taskName}
        each user in users
          //- 20 章 進捗情報を対応させる ここから
          - var state = stateMapMap.get(user.userId).get(task.taskId)
          - var stateLabels = ['未', '今', '済'];
          - var buttonStyles = ['btn-danger', 'btn-secondary', 'btn-success'];
          td
            if user.isSelf
              button(class=`state-toggle-button btn-lg ${buttonStyles[state]}`
                data-event-id=event.eventId
                data-user-id=user.userId
                data-task-id=task.taskId
                data-state=state) #{stateLabels[state]}
            else
              h3 #{stateLabels[state]}
              //- 20 章 進捗情報を対応させるここまで
    //- 21章 AJAX によるコメントの更新
    tr
      th コメント
      each user in users
        if user.isSelf
          td
            p
              small#self-comment #{commentMap.get(user.userId)}
            //- 21章 AJAX による進捗の更新
            //- dataで始まる名前の属性を設定して、AJAX での通信で利用できるようにする
            button(
              data-event-id=event.eventId
              data-user-id=user.userId)#self-comment-button.btn-xs.btn-info 編集
        else
          td
            p
              small #{commentMap.get(user.userId)}